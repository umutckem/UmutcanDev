@model IEnumerable<UmutcanDev.Core.Model.Sergi>

@{
    ViewData["Title"] = "Umutcan'ın Portföyü";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/portfolio.css">
}

<!-- Loading Animation -->
<div id="loading-screen" class="loading-screen">
    <div class="loading-content">
        <div class="loading-spinner"></div>
        <h2>Umutcan Kemahlı</h2>
        <p>Portföy Yükleniyor...</p>
    </div>
</div>

<!-- Page Transition -->
<div id="page-transition" class="page-transition"></div>

<!-- Scroll Progress Bar -->
<div id="scroll-progress" class="scroll-progress"></div>

<!-- Cursor Trail - Removed -->

<!-- Main Content -->
<div data-theme="light">

<!-- Hero Section -->
<section class="hero-section">
    <div id="particles-js" class="particles-container"></div>
    <div class="container">
        <div class="hero-content">
            <div class="hero-text">
                <h1> <span class="text-highlight"><span id="typing-text"></span><span class="cursor">|</span></span></h1>
                <h2>Bilgisayar Mühendisi</h2>
                    <p class="lead">Hayallerini satır satır kodlayan bir öğrenci.</p>

            </div>
            <div class="hero-image">
                <div class="profile-image-container">
                    <img src="/images/profil.jpg" alt="Umutcan Kemahlı" class="profile-image">
                    <div class="image-border"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Dark Mode Toggle -->
    <div class="theme-toggle">
        <button id="theme-toggle" class="theme-toggle-btn">
            <i class="bi bi-sun-fill" id="sun-icon"></i>
            <i class="bi bi-moon-fill" id="moon-icon"></i>
        </button>
    </div>
</section>

<!-- Back to Top Button -->
<button id="back-to-top" class="back-to-top-btn">
    <i class="bi bi-arrow-up"></i>
</button>



<!-- About Section -->
<section class="about-section" id="about">
    <div class="container">
        <div class="section-header">
            <h2>Hakkımda</h2>
            <p>Kendimi ve yeteneklerimi tanıyın</p>
        </div>

        <div class="about-content">
            <div class="about-details">
                <h3>Yazılım Geliştirici Olarak Yolculuğum</h3>
                    <p>Backend geliştirme alanında C# ve Python ile projeler üretiyor, .NET teknolojileriyle API ve veritabanı tabanlı uygulamalar geliştiriyorum. Sürekli öğrenmeye ve edindiğim bilgileri gerçek dünyada değer üreten projelere dönüştürmeye odaklanıyorum.</p>

                <div class="personal-info">
                    <div class="info-item">
                        <span class="info-label">Şehir:</span>
                        <span class="info-value">Adana, Türkiye</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Eğitim:</span>
                        <span class="info-value">Isparta Uygulamalı Bilimler Üniversitesi Bilgisayar Mühendisliği</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Uzmanlık:</span>
                        <span class="info-value">Back-End Geliştirme</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Email:</span>
                        <span class="info-value">
                            <a href="mailto:umutcankemahli637@gmail.com" class="email-link">umutcankemahli637@gmail.com</a>
                        </span>
                    </div>
                </div>
            </div>

            <div class="skills-chart">
                <div class="skill-item">
                    <div class="skill-info">
                        <span>ASP.NET Core</span>
                        <span class="skill-percentage" data-target="90">0%</span>
                    </div>
                    <div class="skill-bar">
                        <div class="skill-progress" data-width="90"></div>
                    </div>
                </div>
                <div class="skill-item">
                    <div class="skill-info">
                            <span>.NET MAUI</span>
                        <span class="skill-percentage" data-target="85">0%</span>
                    </div>
                    <div class="skill-bar">
                        <div class="skill-progress" data-width="85"></div>
                    </div>
                </div>
                <div class="skill-item">
                    <div class="skill-info">
                            <span>Python</span>
                        <span class="skill-percentage" data-target="80">0%</span>
                    </div>
                    <div class="skill-bar">
                        <div class="skill-progress" data-width="80"></div>
                    </div>
                </div>
                <div class="skill-item">
                    <div class="skill-info">
                            <span>SQL Server</span>
                        <span class="skill-percentage" data-target="75">0%</span>
                    </div>
                    <div class="skill-bar">
                        <div class="skill-progress" data-width="75"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Skills Section -->
<section class="skills-section">
    <div class="container">
        <div class="section-header">
            <h2>Yetenekler</h2>
            <p>Uzmanlık alanlarım ve teknolojiler</p>
        </div>

        <div class="skills-grid">
            <div class="skill-card glow-effect magnetic" data-skill="aspnet">
                <div class="skill-icon">
                    <i class="bi bi-gear-fill"></i>
                </div>
                <h3>ASP.NET MVC</h3>
                <p>Web uygulamaları geliştirme konusunda deneyimli</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="90"></div>
                </div>
            </div>

            <div class="skill-card glow-effect magnetic" data-skill="maui">
                <div class="skill-icon">
                    <i class="bi bi-phone-fill"></i>
                </div>
                <h3>.NET MAUI</h3>
                <p>Cross-platform mobil uygulama geliştirme</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="85"></div>
                </div>
            </div>

            <div class="skill-card glow-effect magnetic" data-skill="arduino">
                <div class="skill-icon">
                    <i class="bi bi-cpu-fill"></i>
                </div>
                <h3>Arduino</h3>
                <p>Donanım ve IoT projeleri geliştirme</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="80"></div>
                </div>
            </div>

            <div class="skill-card glow-effect magnetic" data-skill="cpp">
                <div class="skill-icon">
                    <i class="bi bi-code-slash"></i>
                </div>
                <h3>C++</h3>
                <p>Algoritma ve sistem programlama</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="75"></div>
                </div>
            </div>

            <div class="skill-card glow-effect magnetic" data-skill="java">
                <div class="skill-icon">
                    <i class="bi bi-cup-hot-fill"></i>
                </div>
                <h3>Java</h3>
                <p>OOP ve uygulama geliştirme</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="70"></div>
                </div>
            </div>

            <div class="skill-card glow-effect magnetic" data-skill="sql">
                <div class="skill-icon">
                    <i class="bi bi-database-fill"></i>
                </div>
                <h3>SQL Server</h3>
                <p>Veritabanı yönetimi ve optimizasyon</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="85"></div>
                </div>
            </div>

                <div class="skill-card glow-effect magnetic" data-skill="python">
                    <div class="skill-icon">
                        <i class="bi bi-filetype-py"></i>
                    </div>
                    <h3>Python</h3>
                    <p>Veri işleme, otomasyon ve uygulama geliştirme</p>
                    <div class="skill-level">
                        <div class="skill-progress-mini" data-level="80"></div>
                    </div>
                </div>


            <div class="skill-card glow-effect magnetic" data-skill="aspnetcore">
                <div class="skill-icon">
                    <i class="bi bi-globe"></i>
                </div>
                <h3>ASP.NET Core</h3>
                <p>Modern Web API geliştirme</p>
                <div class="skill-level">
                    <div class="skill-progress-mini" data-level="90"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Projects Section -->
<section class="projects-section" id="projects">
    <div class="container">
        <div class="section-header">
            <h2>Projelerim</h2>
            <p>Gerçekleştirdiğim bazı çalışmalar</p>
        </div>



        <div class="projects-grid" id="projects-grid">
            @if (Model != null && Model.Any())
            {
                foreach (var sergi in Model)
                {
                    if (sergi == null) { continue; }

                    <div class="project-card" data-category="@(sergi.TeknolojilerListesi != null ? string.Join(" ", sergi.TeknolojilerListesi).ToLower() : "")" data-title="@(sergi.ProjeAdi?.ToLower() ?? "")">
                        @if (!string.IsNullOrWhiteSpace(sergi.ResimUrl))
                        {
                            <div class="project-image">
                                <img src="@sergi.ResimUrl" alt="@sergi.ProjeAdi" loading="lazy">
                            </div>
                        }
                        <div class="project-content">
                            <h3>@(!string.IsNullOrWhiteSpace(sergi.ProjeAdi) ? sergi.ProjeAdi : "Proje Adı Yok")</h3>
                            <p>@(!string.IsNullOrWhiteSpace(sergi.Aciklama) ? sergi.Aciklama : "Açıklama Yok")</p>

                            @if (sergi.TeknolojilerListesi != null && sergi.TeknolojilerListesi.Any())
                            {
                                <div class="project-tech">
                                    @foreach (var tech in sergi.TeknolojilerListesi)
                                    {
                                        if (!string.IsNullOrWhiteSpace(tech))
                                        {
                                            <span>@tech</span>
                                        }
                                    }
                                </div>
                            }

                            <div class="project-footer">
                                <span class="project-date">
                                    @(sergi.OlusturmaTarihi?.ToString("MMM yyyy") ?? "Tarih yok")
                                </span>
                                @if (!string.IsNullOrWhiteSpace(sergi.GithubUrl))
                                {
                                    <a href="@sergi.GithubUrl" target="_blank" class="project-link">
                                        <i class="bi bi-github"></i> GitHub
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-projects">
                    <i class="bi bi-folder-x"></i>
                    <p>Henüz gösterilecek proje bulunmamaktadır</p>
                </div>
            }
        </div>
    </div>
</section>

<!-- Contact Section -->
<section class="contact-section" id="contact">
    <div class="container">
        <div class="section-header">
            <h2>İletişim</h2>
            <p>Benimle iletişime geçin</p>
        </div>

        <div class="contact-content">
            <div class="contact-info">
                <div class="contact-card">
                    <div class="contact-icon">
                        <i class="bi bi-envelope-fill"></i>
                    </div>
                    <h3>Email</h3>
                    <p>
                        <a href="mailto:umutcankemahli637@gmail.com" class="email-link">umutcankemahli637@gmail.com</a>
                    </p>
                    <a href="mailto:umutcankemahli637@gmail.com" class="contact-link">Mesaj Gönder</a>
                </div>

                <div class="contact-card">
                    <div class="contact-icon">
                        <i class="bi bi-share-fill"></i>
                    </div>
                    <h3>Sosyal Medya</h3>
                    <p>Beni takip edin</p>
                    <div class="social-links">
                        <a href="https://www.linkedin.com/in/umutcan-kemahl%C4%B1-0ab41a31a/" target="_blank" class="social-link linkedin">
                            <i class="bi bi-linkedin"></i>
                        </a>
                        <a href="https://github.com/umutckem" target="_blank" class="social-link github">
                            <i class="bi bi-github"></i>
                        </a>
                        <a href="https://www.instagram.com/umutcan_kemahli/" target="_blank" class="social-link instagram">
                            <i class="bi bi-instagram"></i>
                        </a>
                    </div>
                </div>
            </div>

            <div class="contact-form">
                <form method="post" action="/GeriBildirim/GeriBildirimEkle" id="contact-form">
                    <div class="form-group">
                        <input type="text" name="AdSoyad" id="adSoyad" placeholder="Adınız" required>
                        <span class="error-message" id="adSoyad-error"></span>
                    </div>
                    <div class="form-group">
                        <input type="email" name="Email" id="email" placeholder="Email Adresiniz" required>
                        <span class="error-message" id="email-error"></span>
                    </div>
                    <div class="form-group">
                        <input type="text" name="Konu" id="konu" placeholder="Konu">
                        <span class="error-message" id="konu-error"></span>
                    </div>
                    <div class="form-group">
                        <textarea name="Mesaj" id="mesaj" placeholder="Mesajınız" required></textarea>
                        <span class="error-message" id="mesaj-error"></span>
                    </div>
                    <button type="submit" class="submit-btn" id="submit-btn">
                        <span class="btn-text">Mesaj Gönder</span>
                        <span class="btn-loading" style="display: none;">
                            <i class="bi bi-arrow-clockwise"></i> Gönderiliyor...
                        </span>
                    </button>
                </form>
            </div>

        </div>
    </div>
</section>
</div>

@section Scripts {
<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Loading Screen
        const loadingScreen = document.getElementById('loading-screen');
        
        // Sayfa yüklendikten 2 saniye sonra loading'i gizle
        setTimeout(() => {
            loadingScreen.classList.add('hidden');
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 500);
        }, 2000);

        // Dark Mode Toggle
        const themeToggle = document.getElementById('theme-toggle');
        const themeContainer = document.querySelector('[data-theme]');
        
        // Local storage'dan tema tercihini al
        const currentTheme = localStorage.getItem('theme') || 'light';
        themeContainer.setAttribute('data-theme', currentTheme);
        
        themeToggle.addEventListener('click', () => {
            const currentTheme = themeContainer.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            themeContainer.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        });

        // Typing Animation
        const typingText = document.getElementById('typing-text');
        const text = "Umutcan Kemahlı";
        let index = 0;
        let isDeleting = false;
        let typingSpeed = 150; // Yazma hızı (ms)
        let deletingSpeed = 100; // Silme hızı (ms)
        let pauseTime = 2000; // Yazıldıktan sonra bekleme süresi (ms)

        function typeWriter() {
            const currentText = text.substring(0, index);
            typingText.textContent = currentText;

            if (!isDeleting && index < text.length) {
                // Yazma işlemi
                index++;
                setTimeout(typeWriter, typingSpeed);
            } else if (!isDeleting && index === text.length) {
                // Yazma tamamlandı, bekle
                setTimeout(() => {
                    isDeleting = true;
                    typeWriter();
                }, pauseTime);
            } else if (isDeleting && index > 0) {
                // Silme işlemi
                index--;
                setTimeout(typeWriter, deletingSpeed);
            } else if (isDeleting && index === 0) {
                // Silme tamamlandı, tekrar yazmaya başla
                isDeleting = false;
                setTimeout(typeWriter, 500);
            }
        }

        // Typing animasyonunu başlat
        typeWriter();

        // Skill Counter Animation
        function animateSkillCounters() {
            const skillPercentages = document.querySelectorAll('.skill-percentage');
            const skillProgresses = document.querySelectorAll('.skill-progress');
            
            skillPercentages.forEach((percentage, index) => {
                const target = parseInt(percentage.getAttribute('data-target'));
                const progress = skillProgresses[index];
                let current = 0;
                
                const timer = setInterval(() => {
                    current += 1;
                    percentage.textContent = current + '%';
                    progress.style.width = current + '%';
                    
                    if (current >= target) {
                        clearInterval(timer);
                    }
                }, 30);
            });
        }

        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function(e) {
                e.preventDefault();

                const targetId = this.getAttribute('href');
                const targetElement = document.querySelector(targetId);

                if (targetElement) {
                    window.scrollTo({
                        top: targetElement.offsetTop - 80,
                        behavior: 'smooth'
                    });
                }
            });
        });

        // Animation on scroll
        const animateOnScroll = function() {
            const elements = document.querySelectorAll('.skill-card, .project-card, .contact-card');
            const aboutSection = document.querySelector('.about-section');

            elements.forEach(element => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;

                if (elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });

            // Skill counter animasyonunu tetikle
            if (aboutSection) {
                const aboutPosition = aboutSection.getBoundingClientRect().top;
                const aboutScreenPosition = window.innerHeight / 1.5;
                
                if (aboutPosition < aboutScreenPosition) {
                    // Sayaç animasyonunu sadece bir kez çalıştır
                    if (!window.skillCountersAnimated) {
                        animateSkillCounters();
                        window.skillCountersAnimated = true;
                    }
                }
            }
        };

        // Set initial state
        const animatedElements = document.querySelectorAll('.skill-card, .project-card, .contact-card');
        animatedElements.forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(20px)';
            element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        });

        window.addEventListener('scroll', animateOnScroll);
        animateOnScroll(); // Run once on load

        // Back to Top Button
        const backToTopBtn = document.getElementById('back-to-top');
        
        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                backToTopBtn.classList.add('show');
            } else {
                backToTopBtn.classList.remove('show');
            }
        });

        backToTopBtn.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });



        // Contact Form Validation
        const contactForm = document.getElementById('contact-form');
        const submitBtn = document.getElementById('submit-btn');
        const btnText = submitBtn.querySelector('.btn-text');
        const btnLoading = submitBtn.querySelector('.btn-loading');

        // Real-time validation
        const inputs = contactForm.querySelectorAll('input, textarea');
        inputs.forEach(input => {
            input.addEventListener('blur', validateField);
            input.addEventListener('input', clearError);
        });

        function validateField(e) {
            const field = e.target;
            const value = field.value.trim();
            const errorElement = document.getElementById(field.id + '-error');
            
            // Clear previous states
            field.classList.remove('error', 'success');
            errorElement.classList.remove('show');
            errorElement.textContent = '';

            // Validation rules
            if (field.hasAttribute('required') && !value) {
                showError(field, errorElement, 'Bu alan zorunludur');
                return false;
            }

            if (field.type === 'email' && value) {
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (!emailRegex.test(value)) {
                    showError(field, errorElement, 'Geçerli bir email adresi giriniz');
                    return false;
                }
            }

            if (field.id === 'adSoyad' && value.length < 2) {
                showError(field, errorElement, 'Ad soyad en az 2 karakter olmalıdır');
                return false;
            }

            if (field.id === 'mesaj' && value.length < 10) {
                showError(field, errorElement, 'Mesaj en az 10 karakter olmalıdır');
                return false;
            }

            // Success state
            if (value) {
                field.classList.add('success');
            }

            return true;
        }

        function showError(field, errorElement, message) {
            field.classList.add('error');
            errorElement.textContent = message;
            errorElement.classList.add('show');
        }

        function clearError(e) {
            const field = e.target;
            const errorElement = document.getElementById(field.id + '-error');
            
            field.classList.remove('error');
            errorElement.classList.remove('show');
        }

        // Form submission
        contactForm.addEventListener('submit', function(e) {
            // Validate all fields
            let isValid = true;
            inputs.forEach(input => {
                if (!validateField({ target: input })) {
                    isValid = false;
                }
            });

            if (!isValid) {
                e.preventDefault();
                return;
            }

            // Show loading state
            btnText.style.display = 'none';
            btnLoading.style.display = 'flex';
            submitBtn.disabled = true;

            // Form is valid, let it submit naturally
            // The form will submit to /GeriBildirim/GeriBildirimEkle
            showNotification('Form gönderiliyor...', 'info');
        });

        // Page Transitions
        function triggerPageTransition() {
            const transition = document.getElementById('page-transition');
            transition.classList.add('active');
            
            setTimeout(() => {
                transition.classList.remove('active');
            }, 500);
        }

        // Trigger transition on internal links
        document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                triggerPageTransition();
                
                setTimeout(() => {
                    const targetId = link.getAttribute('href');
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 80,
                            behavior: 'smooth'
                        });
                    }
                }, 250);
            });
        });

        // Scroll Progress Bar
        const scrollProgress = document.getElementById('scroll-progress');
        
        window.addEventListener('scroll', () => {
            const scrollTop = window.pageYOffset;
            const docHeight = document.body.scrollHeight - window.innerHeight;
            const scrollPercent = (scrollTop / docHeight) * 100;
            scrollProgress.style.width = scrollPercent + '%';
        });

        // Particles.js Configuration
        if (typeof particlesJS !== 'undefined') {
            particlesJS('particles-js', {
                particles: {
                    number: {
                        value: 80,
                        density: {
                            enable: true,
                            value_area: 800
                        }
                    },
                    color: {
                        value: '#ffffff'
                    },
                    shape: {
                        type: 'circle'
                    },
                    opacity: {
                        value: 0.5,
                        random: false
                    },
                    size: {
                        value: 3,
                        random: true
                    },
                    links: {
                        enable: true,
                        distance: 150,
                        color: '#ffffff',
                        opacity: 0.4,
                        width: 1
                    },
                    move: {
                        enable: true,
                        speed: 2,
                        direction: 'none',
                        random: false,
                        straight: false,
                        outMode: 'out',
                        bounce: false
                    }
                },
                interactivity: {
                    detectOn: 'canvas',
                    events: {
                        onHover: {
                            enable: true,
                            mode: 'repulse'
                        },
                        onClick: {
                            enable: true,
                            mode: 'push'
                        },
                        resize: true
                    },
                    modes: {
                        repulse: {
                            distance: 100,
                            duration: 0.4
                        },
                        push: {
                            particlesNb: 4
                        }
                    }
                },
                retinaDetect: true
            });
        }



        // Notification System
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = 'notification notification-' + type;
            const iconClass = type === 'success' ? 'check-circle' : type === 'error' ? 'x-circle' : 'info-circle';
            notification.innerHTML = '<i class="bi bi-' + iconClass + '"></i><span>' + message + '</span>';
            
            document.body.appendChild(notification);
            
            // Animasyon
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Otomatik kaldır
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        // Magnetic Effect
        const magneticElements = document.querySelectorAll('.magnetic');
        
        magneticElements.forEach(element => {
            element.addEventListener('mousemove', (e) => {
                const rect = element.getBoundingClientRect();
                const x = e.clientX - rect.left - rect.width / 2;
                const y = e.clientY - rect.top - rect.height / 2;
                
                element.style.transform = 'translate(' + (x * 0.1) + 'px, ' + (y * 0.1) + 'px)';
            });
            
            element.addEventListener('mouseleave', () => {
                element.style.transform = 'translate(0, 0)';
            });
        });

        // Text Reveal Animation
        const textRevealElements = document.querySelectorAll('.text-reveal');
        
        const observerOptions = {
            threshold: 0.5,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const textObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('revealed');
                }
            });
        }, observerOptions);
        
        textRevealElements.forEach(element => {
            textObserver.observe(element);
        });

        // Glow Effect
        const glowElements = document.querySelectorAll('.glow-effect');
        
        glowElements.forEach(element => {
            element.addEventListener('mouseenter', () => {
                element.style.transform = 'scale(1.05)';
            });
            
            element.addEventListener('mouseleave', () => {
                element.style.transform = 'scale(1)';
            });
        });

        // Cursor Trail Effect - Removed

        // Skill Progress Animation
        function animateSkillProgress() {
            const skillProgresses = document.querySelectorAll('.skill-progress-mini');
            
            skillProgresses.forEach(progress => {
                const level = progress.getAttribute('data-level');
                progress.style.width = level + '%';
            });
        }

        // Trigger skill progress animation when skills section is visible
        const skillsSection = document.querySelector('.skills-section');
        const skillsObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    animateSkillProgress();
                    skillsObserver.unobserve(entry.target);
                }
            });
        }, { threshold: 0.5 });

        if (skillsSection) {
            skillsObserver.observe(skillsSection);
        }

        // Enhanced Skill Card Interactions
        const skillCards = document.querySelectorAll('.skill-card');
        
        skillCards.forEach(card => {
            card.addEventListener('mouseenter', () => {
                const skill = card.getAttribute('data-skill');
                showNotification(skill.toUpperCase() + ' yeteneği aktif!', 'info');
            });
        });

        // Text Reveal for Section Headers
        const sectionHeaders = document.querySelectorAll('.section-header h2');
        sectionHeaders.forEach(header => {
            header.classList.add('text-reveal');
        });

        // Add floating animation to profile image
        const profileImage = document.querySelector('.profile-image-container');
        if (profileImage) {
            profileImage.classList.add('floating-element');
        }

        // Add gradient text effect to hero title
        const heroTitle = document.querySelector('.hero-section h1');
        if (heroTitle) {
            heroTitle.classList.add('gradient-text');
        }

        // Add 3D effect to project cards
        const projectCards = document.querySelectorAll('.project-card');
        projectCards.forEach(card => {
            card.classList.add('card-3d');
        });

        // Add ripple effect to buttons
        const buttons = document.querySelectorAll('.btn-primary, .btn-secondary, .submit-btn');
        buttons.forEach(button => {
            button.classList.add('ripple-effect');
        });

        // Keyboard Navigation
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case 'Escape':
                    // Close any open modals or notifications
                    const notifications = document.querySelectorAll('.notification');
                    notifications.forEach(notification => notification.remove());
                    break;
                case 'd':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        // Toggle dark mode
                        const themeContainer = document.querySelector('[data-theme]');
                        const currentTheme = themeContainer.getAttribute('data-theme');
                        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                        themeContainer.setAttribute('data-theme', newTheme);
                        localStorage.setItem('theme', newTheme);
                        showNotification('Tema değiştirildi: ' + newTheme, 'info');
                    }
                    break;
            }
        });

        // Performance Optimization: Throttle scroll events
        let ticking = false;
        function updateOnScroll() {
            // Scroll-based animations
            ticking = false;
        }

        function requestTick() {
            if (!ticking) {
                requestAnimationFrame(updateOnScroll);
                ticking = true;
            }
        }

        window.addEventListener('scroll', requestTick);

        // Email Link Interactions
        const emailLinks = document.querySelectorAll('.email-link');
        
        emailLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                
                // Copy email to clipboard
                const email = link.textContent;
                navigator.clipboard.writeText(email).then(() => {
                    showNotification('Email adresi kopyalandı!', 'success');
                }).catch(() => {
                    // Fallback: open mail client
                    window.location.href = 'mailto:' + email;
                });
            });
            
            // Add tooltip on hover
            link.addEventListener('mouseenter', () => {
                link.title = 'Tıklayarak kopyala veya mail uygulamasını aç';
            });
        });

        // Social Media Link Interactions
        const socialLinks = document.querySelectorAll('.social-link');
        
        console.log('Found social links:', socialLinks.length);
        
        socialLinks.forEach((link, index) => {
            console.log(`Social link ${index}:`, link.href, link.classList.toString());
            
            // Add tooltip on hover
            link.addEventListener('mouseenter', () => {
                const platform = link.classList.contains('linkedin') ? 'LinkedIn' : 
                               link.classList.contains('github') ? 'GitHub' : 
                               link.classList.contains('instagram') ? 'Instagram' : 'Sosyal Medya';
                link.title = platform + ' profilimi ziyaret et';
                console.log('Mouse entered:', platform);
            });
            
            // Add click feedback
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const platform = link.classList.contains('linkedin') ? 'LinkedIn' : 
                               link.classList.contains('github') ? 'GitHub' : 
                               link.classList.contains('instagram') ? 'Instagram' : 'Sosyal Medya';
                console.log('Clicked:', platform, link.href);
                showNotification(platform + ' profilime yönlendiriliyorsunuz...', 'info');
                
                // Open link after a short delay
                setTimeout(() => {
                    window.open(link.href, '_blank');
                }, 500);
            });
        });
    });
</script>
}